/*
Problem Statement: You are given a string s, partition it in such a way that every substring is a palindrome. Return all such palindromic partitions of s.

Note: A palindrome string is a string that reads the same backward as forward.

Examples:

Example 1:

Input: s = “aab”

Output: [ ["a","a","b"], ["aa","b"] ]	

Explanation: The first  answer is generated by  making three partitions. The second answer is generated by making two partitions.
 


Example 2:

Input: s = “aabb”

Output: [ [“a”,”a”,”b”,”b”], [“aa”,”bb”], [“a”,”a”,”bb”], [“aa”,”b”,”b”] ] 

*/



class Solution { 
    
    bool isPal(string str,int l,int h)
    {
       while(l<h)
       {
           if(str[l]!=str[h])
               return false;
           
           l++;
           h--;
       }
        return true;
    }
    
    void partitionKaro(int start,string str,vector<string> &curr,vector<vector<string>> &ans)
    {
        if(start == str.size())
        {
             ans.push_back(curr);
            return;
        }
        
        for(int i = start;i<str.size();i++)
        {
            if(isPal(str,start,i))
            {
                curr.push_back(str.substr(start,i-start+1));
                partitionKaro(i+1,str,curr,ans);
                curr.pop_back();
            }
        }
    }
public:
    vector<vector<string>> partition(string s) {
        
        vector<vector<string>> ans;
        vector<string> curr;
        
        partitionKaro(0,s,curr,ans);
        
        return ans;
    }
};